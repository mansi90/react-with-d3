buildscript {
	ext {
		springBootVersion = '1.4.3.RELEASE'
	}
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("com.bertramlabs.plugins:asset-pipeline-gradle:2.6.7")
		classpath "com.moowork.gradle:gradle-node-plugin:0.12"
		classpath "com.moowork.gradle:gradle-grunt-plugin:0.12"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'asset-pipeline'
apply plugin: 'com.moowork.node'
apply plugin: "com.moowork.grunt"


grunt {
	// Set the directory where Gruntfile.js should be found
	workDir = file("${project.projectDir}")
	// Whether colors should output on the terminal
	colors = true
	// Whether output from Grunt should be buffered - useful when running tasks in parallel
	bufferOutput = false
}

node {
	// Version of node to use.
	version = '6.2.0'

	// Version of npm to use.
	npmVersion = '3.8.9'

	// Base URL for fetching node distributions (change if you have a mirror).
	distBaseUrl = 'https://nodejs.org/dist'

	// If true, it will download node using above parameters.
	// If false, it will try to use globally installed node.
	download = true

	// Set the work directory for unpacking node
//    workDir = file("${project.buildDir}/nodejs")

	// Set the work directory where node_modules should be located
	nodeModulesDir = file("${project.projectDir}")
}



npm_install.doFirst {
	new File(project.projectDir, "bower_components").mkdirs()
	args = ['--unsafe-perm'] //npm install by root user on server
}


npm_install.dependsOn npm_cache_clean
installGrunt.dependsOn npm_install
grunt_default.dependsOn installGrunt
//grunt_default.dependsOn installGrunt
bootRun.dependsOn grunt_default
build.dependsOn grunt_default


war {
	baseName = 'react-with-d3'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations {
	providedRuntime
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	testCompile('org.springframework.boot:spring-boot-starter-test')


	//Asset Pipeline Dependencies
	compile("com.bertramlabs.plugins:asset-pipeline-spring-boot:2.6.7")
}
assets {
	minifyJs = false
	minifyCss = false
	enableSourceMaps = false
	configOptions = [:]

	includes = []
}

bootRun {
	addResources = true
}

allprojects {
	tasks.withType(JavaCompile) {
		options.fork = true
		options.incremental = true
	}

	tasks.withType(GroovyCompile) {
		options.fork = true
		options.incremental = true
	}
}